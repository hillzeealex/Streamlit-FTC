import streamlit as st
import requests
import pandas as pd
pd.set_option('display.max_colwidth', None)  # Supprime la limitation de la largeur des colonnes


# URL de votre API FastAPI
API_URL = "http://127.0.0.1:8000/predict"

# Configurer la page Streamlit
st.set_page_config(
    page_title="FIT tes courses !",
    page_icon="ü•ó",
    layout="wide"
)

# Interface principale
def main():
    st.title("ü•ó FIT tes courses !")
    st.markdown("**L'app qui te permet de cr√©er ta liste de courses id√©ale !**")
    st.divider()

    # Cr√©er deux colonnes pour les sections Ingr√©dients et Mood
    col1, col2 = st.columns(2)

    # Colonne 1¬†: Section Ingr√©dients
    with col1:
        st.subheader("üõí Vos Ingr√©dients")
        if 'ingredients' not in st.session_state:
            st.session_state['ingredients'] = []

        # Ajouter un nouvel ingr√©dient
        new_ingredient = st.text_input(
            "Ajoutez un ingr√©dient (appuyez sur Ajouter l'ingr√©dient pour valider)¬†:",
            placeholder="Exemple : lentil, tomato..."
        )
        if st.button("‚ûï Ajouter l'ingr√©dient"):
            if new_ingredient:
                st.session_state['ingredients'].append(new_ingredient)
            else:
                st.warning("Veuillez entrer un ingr√©dient valide.")


        # Supprimer un ingr√©dient
        st.write("Liste actuelle des ingr√©dients :")
        if st.session_state['ingredients']:
            for ingredient in st.session_state['ingredients']:
                sub_col1, sub_col2 = st.columns([8, 2])
                with sub_col1:
                    st.write(ingredient)
                with sub_col2:
                    if st.button(f"‚ùå", key=ingredient):
                        st.session_state['ingredients'].remove(ingredient)
                        st.experimental_rerun()
        else:
            st.write("Aucun ingr√©dient ajout√©.")

    # Colonne 2¬†: Section Mood
    with col2:
        st.subheader("üé≠ Ton Mood")

        # Mapping des moods avec ic√¥nes
        mood_icons = {
            "Tous": "üéØ Tous",
            "R√©confortant & Familier": "üè† R√©confortant & Familier",
            "Sucr√© & Gourmand": "üç´ Sucr√© & Gourmand",
            "Sal√© & Polyvalent": "ü•ó Sal√© & Polyvalent",
            "Sain & L√©ger": "üçé Sain & L√©ger",
            "Copieux & G√©n√©reux": "üçñ Copieux & G√©n√©reux",
        }

        # Ajout de boutons pour chaque mood
        selected_mood = st.radio(
            "",
            options=list(mood_icons.keys()),
            format_func=lambda mood: mood_icons[mood]
        )

        # Mapping des moods s√©lectionn√©s √† des valeurs num√©riques
        mood_mapping = {
            "Tous" : None,
            "R√©confortant & Familier" : 1,
            "Sucr√© & Gourmand": 2,
            "Sal√© & Polyvalent": 3,
            "Sain & L√©ger": 4,
            "Copieux & G√©n√©reux": 5
        }
        mood = mood_mapping[selected_mood]

    # Ajouter une ligne de s√©paration
    st.divider()

    # Ajouter un saut de ligne avant la section suivante
    st.markdown("<br>", unsafe_allow_html=True)

    # Section Filtres
    st.subheader("‚öôÔ∏è Tes crit√®res")

    with st.expander("‚öôÔ∏è clic pour afficher plus de crit√®res ", expanded=False):
        col1, col2 = st.columns(2)

        # Colonne 1 : Option Healthy, Saison et Origine
        with col1:
            st.markdown("**Healthy**")
            healthy = st.selectbox(
                "5 fruits et l√©gumes par jours",
                ["Aucun", "Oui", "Non"]
            )
            healthy_mapping = {"Aucun": None, "Oui": 1, "Non": 0}
            healthy = healthy_mapping[healthy]

            st.markdown("**Saison**")
            saison = st.selectbox(
                "Choisis ta saison : √©t√©, hiver, automne, printemps",
                ["Aucune", "Printemps", "√ât√©", "Automne", "Hiver"]
            )
            saison_mapping = {"Aucune": None, "Printemps": 1, "√ât√©": 2, "Automne": 3, "Hiver": 4}
            saison = saison_mapping[saison]

            st.markdown("**Origine**")
            origine = st.text_input("Cette semaine tu te sens : italien, am√©ricain, fran√ßais...")

        # Colonne 2 : Type de plat, Temps de pr√©paration et Cat√©gories
        with col2:
            st.markdown("**Type de plat**")
            type_de_plat = st.multiselect(
                "Tu es plus entr√©e, plat, dessert ou ap√©ro",
                ["Aucun", "Entr√©e", "Plat principal", "Dessert", "Ap√©ro"]
            )
            type_de_plat_mapping = {"Aucun": None, "Entr√©e": 1, "Plat principal": 2, "Dessert": 3, "Ap√©ro": 4}
            # Convertir les s√©lections en leurs valeurs correspondantes
            type_de_plat = [type_de_plat_mapping[plat] for plat in type_de_plat]

            st.markdown("**Temps de pr√©paration**")
            temps_preparation = st.selectbox(
                "On voudrait tous avoir plus de 24h dans une journ√©e",
                ["Aucun", "Rapide (<15 min)", "Normal (15-30 min)", "Long (>30 min)"]
            )
            temps_preparation_mapping = {"Aucun": None, "Rapide (<15 min)": 0, "Normal (15-30 min)": 1, "Long (>30 min)": 2}
            temps_preparation = temps_preparation_mapping[temps_preparation]

            st.markdown("**Cat√©gories alimentaires**")
            categories = st.multiselect(
                "Si tu es Vegan, V√©g√©tarien ou autre, on est avec toi",
                ["Vegan", "V√©g√©tarien", "Sans gluten"]
            )

    st.divider()

    # Recherche de recettes
    if st.button("üîç Rechercher des recettes"):
        if not st.session_state['ingredients']:
            st.warning("Veuillez ajouter au moins un ingr√©dient avant de lancer la recherche.")
        else:
            # Pr√©parer les param√®tres pour l'API
            payload = {
                "user_ingredients": st.session_state['ingredients'],
                "healthy": healthy,
                "season": saison,
                "dish_type": type_de_plat,
                "prep_time": temps_preparation,
                "origin": origine,
                "categories": ", ".join(categories),
                "mood" : mood
            }
            # Appeler l'API FastAPI
            try:
                response = requests.get(API_URL, params=payload)
                response.raise_for_status()
                data = response.json()
                # Afficher les r√©sultats
                st.header("üìã A vos courses !")
                st.markdown(f"**Ingr√©dients d√©j√† pr√©sents :** {', '.join(st.session_state['ingredients']) or 'Aucun'}")

                if response.status_code == 200:

                    # Combiner les DataFrames
                                        # Mod√®le 1
                    if "result_combined_df" in data and data["result_combined_df"]:
                        combined_df = pd.DataFrame(data["result_combined_df"])

                    else:
                        st.warning("Les r√©sultats des Mod√®les sont vides.")

                    st.subheader("üìä R√©sultats")
                    total_recipes = len(combined_df)
                    total_reviews = combined_df["num_reviews"].sum()
                    avg_rating = combined_df["avg_rating"].mean()
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.metric("Recettes selectionn√©es", total_recipes)
                    with col2:
                        st.metric("Nombre total d'avis", total_reviews)
                    with col3:
                        st.metric("Note moyenne", round(avg_rating, 2))

                    st.subheader("	‚úÖ Listes recettes s√©lectionn√©es")
                    st.dataframe(combined_df)

                    # V√©rifiez si les donn√©es pour Transformers, VADER et les votes sont disponibles
                    if (
                        "top_5_textblob" in data and data["top_5_textblob"] and
                        "top_5_vader" in data and data["top_5_vader"] and
                        "result_combined_df" in data and data["result_combined_df"]
                    ):
                        # Convertir les donn√©es en DataFrames
                        top_5_textblob_df = pd.DataFrame(data["top_5_textblob"])
                        top_5_vader_df = pd.DataFrame(data["top_5_vader"])
                        combined_df = pd.DataFrame(data["result_combined_df"])

                        # Identifier la meilleure recette selon Transformers
                        best_textblob_recipe = top_5_textblob_df.iloc[0]

                        # Identifier la meilleure recette selon VADER
                        best_vader_recipe = top_5_vader_df.iloc[0]

                        # Identifier la recette avec le plus de votes
                        most_voted_recipe = combined_df.sort_values(by="num_reviews", ascending=False).iloc[0]

                        # Cr√©er trois colonnes pour afficher les meilleures recettes
                        col1, col2, col3 = st.columns(3)

                        # Afficher la meilleure recette selon textblob
                        with col1:
                            st.subheader("ü•á Meilleure recette (textblob)")
                            st.markdown(f"### **{best_textblob_recipe['name']}**")
                            st.write(f"üåü Note moyenne : {round(best_textblob_recipe['avg_rating'], 2)}")
                            st.write(f"üë• Nombre d'avis : {best_textblob_recipe['num_reviews']}")
                            st.write(f"üèÜ Calories : {best_textblob_recipe['calories']} kcal")
                            st.write(f"‚è≥ Temps de pr√©paration : {best_textblob_recipe['minutes']} min")
                            st.markdown("**üõí Ingr√©dients n√©cessaires :**")
                            st.write(", ".join(best_textblob_recipe['missing_ingredients']))
                            st.markdown("**üå± Ingr√©dients √† r√©utiliser :**")
                            st.write(", ".join(best_textblob_recipe['reused_ingredients']))


                        # T√©l√©chargement des r√©sultats
                        st.download_button(
                            label="T√©l√©charger (CSV)",
                            data=combined_df.to_csv(index=False),
                            file_name="recettes.csv",
                            mime="text/csv",
                        )

                        # Afficher la meilleure recette selon VADER
                        with col2:
                            st.subheader("üéñÔ∏è Meilleure recette (VADER)")
                            st.markdown(f"### **{best_vader_recipe['name']}**")
                            st.write(f"üåü Note moyenne : {round(best_vader_recipe['avg_rating'], 2)}")
                            st.write(f"üë• Nombre d'avis : {best_vader_recipe['num_reviews']}")
                            st.write(f"üèÜ Calories : {best_vader_recipe['calories']} kcal")
                            st.write(f"‚è≥ Temps de pr√©paration : {best_vader_recipe['minutes']} min")
                            st.markdown("**üõí Ingr√©dients n√©cessaires :**")
                            st.write(", ".join(best_vader_recipe['missing_ingredients']))
                            st.markdown("**üå± Ingr√©dients √† r√©utiliser :**")
                            st.write(", ".join(best_vader_recipe['reused_ingredients']))

                        # Afficher la recette avec le plus de votes
                        with col3:
                            st.subheader("‚ú® Recette avec le plus de votes")
                            st.markdown(f"### **{most_voted_recipe['name']}**")
                            st.write(f"üåü Note moyenne : {round(most_voted_recipe['avg_rating'], 2)}")
                            st.write(f"üë• Nombre d'avis : {most_voted_recipe['num_reviews']}")
                            st.write(f"üèÜ Calories : {most_voted_recipe['calories']} kcal")
                            st.write(f"‚è≥ Temps de pr√©paration : {most_voted_recipe['minutes']} min")
                            st.markdown("**üõí Ingr√©dients n√©cessaires :**")
                            st.write(", ".join(most_voted_recipe['missing_ingredients']))
                            st.markdown("**üå± Ingr√©dients √† r√©utiliser :**")
                            st.write(", ".join(most_voted_recipe['reused_ingredients']))

                    with st.expander("‚öôÔ∏è clic pour afficher la reco de chaque mod√®le ", expanded=False):
                        if (
                            "top_5_transformer" in data and data["top_5_transformer"] and
                            "top_5_vader" in data and data["top_5_vader"] and
                            "result_combined_df" in data and data["result_combined_df"]
                        ):
                            # Convertir les donn√©es en DataFrames
                            st.subheader("Top 5 avis (transformers)")
                            st.dataframe(top_5_transformer_df)

                            # Convertir les donn√©es en DataFrames
                            st.subheader("Top 5 avis (VADER)")
                            st.dataframe(top_5_vader_df)

                        # Mod√®le 1
                        if "result1" in data and data["result1"]:
                            st.subheader("Reco par reconnaissance d'ingr√©dients")
                            df1 = pd.DataFrame(data["result1"])
                            st.dataframe(df1)
                        else:
                            st.warning("Les r√©sultats du Mod√®le 1 sont vides.")

                        # Mod√®le 2
                        if "result2" in data and data["result2"]:
                            st.subheader("Reco par similirati√© cosinus sur la concat√©nation des ingr√©dients")
                            df2 = pd.DataFrame(data["result2"])
                            st.dataframe(df2)
                        else:
                            st.warning("Les r√©sultats du Mod√®le 2 sont vides.")
                        #Mod√®le 3
                        if "result3" in data and data["result3"]:
                            st.subheader("Reco par similirati√© cosinus sur la concat√©nation des ingr√©dients s√©parer d'une virgule")
                            df3 = pd.DataFrame(data["result3"])
                            st.dataframe(df3)
                        else:
                            st.warning("Les r√©sultats du Mod√®le 3 sont vides.")

                        # Mod√®le 4
                        if "result4" in data and data["result4"]:
                            st.subheader("Reco par recherche des voisins KNN")
                            df4 = pd.DataFrame(data["result4"])
                            st.dataframe(df4)
                        else:
                            st.warning("Les r√©sultats du Mod√®le 4 sont vides.")
            except requests.exceptions.RequestException as e:
                st.error(f"Pas de r√©sultat, veuillez modifier vos filtres")

    st.image("courses_ideal.png", caption="Fit des courses comme nos mod√®les de Machine Learning")

# Ex√©cuter l'application
if __name__ == "__main__":
    main()



                    # # Barre de recherche
                    # st.subheader("Toutes les recettes combin√©es (sans doublons)")
                    # search_term = st.text_input(
                    #     "Recherchez une recette ou un ingr√©dient",
                    #     placeholder="Entrez un mot-cl√© pour filtrer (ex. lentil, tomato)...",
                    #     key="search_input"
                    # )

                    # # Filtrer localement le DataFrame combin√©
                    # if search_term:
                    #     filtered_df = combined_df[
                    #         combined_df.apply(lambda row: search_term.lower() in str(row.values).lower(), axis=1)
                    #     ]
                    # else:
                    #     filtered_df = combined_df

                    # # Afficher les donn√©es filtr√©es
                    # st.dataframe(filtered_df, use_container_width=True)
